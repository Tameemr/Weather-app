{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","app_component/forecast.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","current_Temp","max_Temp","min_Temp","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","Forecast","items","this","forecast","map","f","i","image","url","weather","icon","alt","unixTimestamp","dt","hour","Date","getHours","ampm","Math","floor","temp","src","React","Component","API_key","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","lat","coord","lon","api_call_forecast","resForecast","console","log","setState","sys","main","temp_max","temp_min","hourlyForecast","hourly","get_WeatherIcon","id","status","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0d84160.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-5\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n        {props.current_Temp ? (\r\n          <h1 className=\"py-2\">{props.current_Temp}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/**show max & min temp */}\r\n        {minmaxTemp(props.max_Temp, props.min_Temp)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadWeather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nimport \"./forecast.scss\";\r\n\r\nclass Forecast extends React.Component {\r\n  render() {\r\n    const items = this.props.forecast.map((f, i) => {\r\n      const image = {\r\n        url: `http://openweathermap.org/img/wn/${f.weather[0].icon}@2x.png`,\r\n        alt: `Image of  ${f.weather[0].description}`,\r\n      };\r\n      const description = f.weather[0].description;\r\n      const unixTimestamp = f.dt;\r\n      let hour = new Date(unixTimestamp * 1000).getHours();\r\n      let ampm = \"AM\";\r\n      if (hour === 0) hour = 12;\r\n      else if (hour > 12) {\r\n        hour = hour - 12;\r\n        ampm = \"PM\";\r\n      }\r\n\r\n      return (\r\n        <div key={i} className=\"forecast-item\">\r\n          <p className=\"forecast-item__time\">\r\n            {hour} {ampm}\r\n          </p>\r\n          <p className=\"forecast-item__temp\">\r\n            {Math.floor(f.temp)}{\" \"}\r\n            <span className=\"forecast-item__degree\">Â°</span>\r\n          </p>\r\n          <img className=\"forecast-item__img\" src={image.url} alt={image.alt} />\r\n          <p className=\"forecast-item__description\">{description}</p>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"forecast\">\r\n        <h3 className=\"forecast__title\">Hourly Forecast</h3>\r\n        <div className=\"forecast-items\">{items}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\n// import WeatherIcons from \"./components/weatherIcons.component\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"weather-icons/css/weather-icons.min.css\";\r\nimport Weather from \"./app_component/weather.component\";\r\nimport Form from \"./app_component/form.component\";\r\nimport Forecast from \"./app_component/forecast.component\";\r\n\r\nconst API_key = \"1952cc01bff81ba8bf8650114746df46\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country: undefined,\r\n      current_Temp: undefined,\r\n      max_Temp: undefined,\r\n      min_Temp: undefined,\r\n      description: \"\",\r\n      icon: undefined,\r\n      error: false,\r\n      hourlyForecast: [],\r\n    };\r\n\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\",\r\n    };\r\n  }\r\n\r\n  get_WeatherIcon(icons, rangeID) {\r\n    switch (true) {\r\n      case rangeID >= 200 && rangeID <= 232:\r\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\r\n        break;\r\n      case rangeID >= 300 && rangeID <= 321:\r\n        this.setState({ icon: this.weatherIcon.Drizzle });\r\n        break;\r\n      case rangeID >= 500 && rangeID <= 531:\r\n        this.setState({ icon: this.weatherIcon.Rain });\r\n        break;\r\n      case rangeID >= 600 && rangeID <= 622:\r\n        this.setState({ icon: this.weatherIcon.Snow });\r\n        break;\r\n      case rangeID >= 701 && rangeID <= 781:\r\n        this.setState({ icon: this.weatherIcon.Atmosphere });\r\n        break;\r\n      case rangeID >= 800 && rangeID <= 804:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n        break;\r\n    }\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const city = e.target.elements.city.value;\r\n      const country = e.target.elements.country.value;\r\n      const api_call = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}&units=metric`\r\n      );\r\n      const response = await api_call.json();\r\n\r\n      const lat = response.coord.lat;\r\n      const lon = response.coord.lon;\r\n      const api_call_forecast = await fetch(\r\n        `https://api.openweathermap.org/data/2.5//onecall?lat=${lat}&lon=${lon}&APPID=${API_key}&units=metric`\r\n      );\r\n      const resForecast = await api_call_forecast.json();\r\n      console.log(resForecast);\r\n\r\n      this.setState({\r\n        city: `${response.name}, ${response.sys.country}`,\r\n\r\n        current_Temp: Math.floor(response.main.temp),\r\n        max_Temp: Math.floor(response.main.temp_max),\r\n        min_Temp: Math.floor(response.main.temp_min),\r\n        description: response.weather[0].description,\r\n        error: false,\r\n        hourlyForecast: resForecast.hourly,\r\n      });\r\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 400) {\r\n      }\r\n\r\n      this.setState({\r\n        error: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const hourlyForecast = this.state.hourlyForecast;\r\n    return (\r\n      <div className=\"App\">\r\n        <Form loadWeather={this.getWeather} error={this.state.error} />\r\n        <Weather\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          current_Temp={this.state.current_Temp}\r\n          max_Temp={this.state.max_Temp}\r\n          min_Temp={this.state.min_Temp}\r\n          description={this.state.description}\r\n          weatherIcon={this.state.icon}\r\n        />\r\n        {hourlyForecast.length > 0 && <Forecast forecast={hourlyForecast} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}